#define HW_REGS_BASE  		0xc0000000  
#define HW_REGS_BASE_LW  	0xfc000000
#define HW_REGS_SPAN  		0x04000000
#define HW_REGS_MASK  		HW_REGS_SPAN - 1
#define ALT_LWFPGASLVS_OFST  	0xff200000
#define MICROSECONDS		50000
#define LED_BASE		0xa0
#define SW_BASE			0xb0
#define DONE_BASE               0x90
#define READY_BASE              0xa0
#define WARNING_BASE            0x80
#define SDRAM_BASE		0x00
#define IMG_HEIGHT 512
#define IMG_WIDTH 512
#define BIAS_BASE1 78400
#define BIAS_BASE2 78600
#define WEIGHT_BASEFINAL 78800
#define WEIGHT_BASE1 80800
#define WEIGHT_BASE2 237600
#define TESTLABELS_BASE 394400


#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <time.h>
#include <sys/mman.h>
#include <ctype.h>
#include <math.h>
#include <string.h>

int main() {
//######################################################################## PTRS TO ADDRS
	void *virtual_base, *virtual_base_lw;
	int fd;
	void * sdram_ptr; //, * done_ptr, * ready_ptr; //, * warning_ptr; //* sw_ptr, * led_ptr,
//#########################
	//clock_t begin, end;
	//double time_spent;
    int testLabelsArr[100];
//######################################################################## DEBUG IF NOT MEM NOT AVAIL
  if((fd = open ("/dev/mem",  (O_RDWR | O_SYNC))) == -1) {
    printf( "ERROR: could not open \"/dev/mem\"...\n");
    return( 1 );
  }


//######################################################################## MAPS VB TO A MEMORY ADDR
  virtual_base = mmap(NULL, HW_REGS_SPAN, (PROT_READ|PROT_WRITE), MAP_SHARED, fd, HW_REGS_BASE);
  if( virtual_base == MAP_FAILED ) {
    printf( "ERROR: mmap() failed...\n" ); 
    close( fd );
    return( 1 );
  }
  sdram_ptr = virtual_base + ((unsigned long)(HW_REGS_BASE + SDRAM_BASE) & (unsigned long)(HW_REGS_MASK));
//######################################################################## MAPS OTHER PTRS TO MEM ADDRS
  virtual_base_lw = mmap(NULL, HW_REGS_SPAN, (PROT_READ|PROT_WRITE), MAP_SHARED, fd, HW_REGS_BASE_LW);
  if( virtual_base == MAP_FAILED ) {
    printf( "ERROR: mmap() failed...\n" ); 
    close( fd );
    return( 1 );
  }

//######################################################################## READ FROM ORIGINAL IMAGE AND STORE IN SDRAM
// ########### read in 100 images from TestData -> base = 0
    // creates file ptr for input
	FILE *images100;
	int index100 = 0;
	
	// opens input file for reading
	images100 = fopen("testData.txt", "r");

	// reads numbers and stores into 
	for(index100 = 0; index100 < 78400; index100++){
		fscanf(images100, "%f", &( ((double*)sdram_ptr)[index100]) );
	}

	// closes input file
	fclose(images100);

// ########### read in bias layer1 -> base = 78400
    // creates file ptr for input
	FILE *finalB1;
	int indexB1 = 0;
	
	// opens input file for reading
	finalB1 = fopen("finalB1L1.txt", "r");

	// reads numbers and stores into 
	for(indexB1 = 0; indexB1 < 200; indexB1++){
		fscanf(finalB1, "%f", &( ((double*)sdram_ptr)[BIAS_BASE1 + indexB1]) );
	}

	// closes input file
	fclose(finalB1);

// ########### read in bias layer2 -> base = 78600
    // creates file ptr for input
	FILE *finalB2;
	int indexB2 = 0;
	
	// opens input file for reading
	finalB2 = fopen("finalB1L2.txt", "r");

	// reads numbers and stores into 
	for(indexB2 = 0; indexB2 < 200; indexB2++){
		fscanf(finalB2, "%f", &( ((double*)sdram_ptr)[BIAS_BASE2 + indexB2]) );
	}

	// closes input file
	fclose(finalB2);

// ########### read in weight layerFinal -> base = 78800
    // creates file ptr for input
	FILE *finalST;
	int indexST = 0;
	
	// opens input file for reading
	finalST = fopen("finalSoftmaxTheta.txt", "r");

	// reads numbers and stores into 
	for(indexST = 0; indexST < 2000; indexST++){
		fscanf(finalST, "%f", &( ((double*)sdram_ptr)[WEIGHT_BASEFINAL + indexST]) );
	}

	// closes input file
	fclose(finalST);

// ########### read in weight layer1 -> base = 80800
    // creates file ptr for input
	FILE *finalW1;
	int indexW1 = 0;

	// opens input file for reading
	finalW1 = fopen("finalW1L1.txt", "r");

	// reads numbers and stores into 
	for(indexW1 = 0; indexW1 < 156800; indexW1++){
		fscanf(finalW1, "%f", &( ((double*)sdram_ptr)[WEIGHT_BASE1 + indexW1]) );
	}

	// closes input file
	fclose(finalW1);

// ########### read in weight layer2 -> base = 237600
    // creates file ptr for input
	FILE *finalW2;
	int indexW2 = 0;
	
	// opens input file for reading
	finalW2 = fopen("finalW1L2.txt", "r");

	// reads numbers and stores into 
	for(indexW2 = 0; indexW2 < 156800; indexW2++){
		fscanf(finalW2, "%f", &( ((double*)sdram_ptr)[WEIGHT_BASE2 + indexW2]) );
	}

	// closes input file
	fclose(finalW2);

// ########### read in TestLabels -> base = 394400
    // creates file ptr for input
	FILE *finalLabel;
	int indexLabel = 0;
	
	// opens input file for reading
	finalLabel = fopen("testLabels.txt", "r");

	// reads numbers and stores into 
	for(indexLabel = 0; indexLabel < 100; indexLabel++){
		fscanf(finalLabel, "%d", &( testLabelsArr[indexLabel]) ); //((double*)sdram_ptr)[TESTLABELS_BASE + indexLabel])
        //printf("%d\n", testLabelsArr[indexLabel]);	
    }

	// closes input file
	fclose(finalLabel);

//######################################################################## NN ALGOR
  int x, currNode, prevNode, Correct;
  double ValL1, ValL2, ValLF, ValMax, ValGot, maxIndex;
  double Lay1 [200];
  double Lay2 [200];

  Correct = 0;

  for (x = 0; x < 1; x++){
    
    ValL1 = 0;
    ValL2 = 0;
    ValLF = 0;
    ValMax = 0;
    ValGot = 0;
    maxIndex = 0;

    //*************************************************** layer 1 calcs
    for (currNode = 0; currNode < 200; currNode++){
        ValL1 = 0;
        for(prevNode = 0; prevNode < 784; prevNode++){
            ValL1 += ( ((double*)sdram_ptr)[(784* x) + prevNode] ) * ( ((double*)sdram_ptr)[WEIGHT_BASE1 + (784*currNode) + prevNode] );
        }// for prevNode
        ValL1 += ((double*)sdram_ptr)[BIAS_BASE1 + currNode];
    
        Lay1[currNode] = (1.00000000000000000000/ ( 1.000000000000000000000 + exp(-ValL1) ));

    }// for currNode	

/*
    //*************************************************** layer 2
    for (currNode = 0; currNode < 200; currNode++){
        ValL2 = 0;
        for(prevNode = 0; prevNode < 200; prevNode++){
            ValL2 += Lay1[prevNode] * ( ((double*)sdram_ptr)[WEIGHT_BASE2 + (200*currNode) + prevNode] );
        }// for prevNode
        ValL2 += ((double*)sdram_ptr)[BIAS_BASE2 + currNode];
    
        Lay2[currNode] = (1.0/ ( 1.0 + (double)exp(-((double)ValL2)) ));

    }// for currNode	

    //***************************************************  last layer
    for (currNode = 0; currNode < 10; currNode++){
        ValLF = 0;
        for(prevNode = 0; prevNode < 200; prevNode++){
            ValLF += Lay2[prevNode] * ( ((double*)sdram_ptr)[WEIGHT_BASEFINAL + (200*currNode) + prevNode] );
        }// for prevNode

       ValGot = (1.0/ ( 1.0 + (double)exp(-((double)ValLF)) ));

       if (ValGot > ValMax){
         ValMax = ValGot;
         maxIndex = currNode;
       }

    }// for currNode	


    //*************************************************** compare
    if (maxIndex == testLabelsArr[x])
    {
        Correct++;
    }

*/
  }// read 100 images

  //printf("Num of Correct = %d\n",Correct);

//######################################################################## READ FROM SDRAM (RESULT IMAGE DATA) AND WRITE TO FILE

	FILE *outputtext;
	outputtext = fopen("sdram_lab5.txt", "w+");
    int i = 0;
	
	for(i = 0; i < 200; i++){

		fprintf(outputtext,"%f ",  Lay1[i]);
        //if (i != 0 && i+1 % 200 == 0) {fprintf(outputtext,"\n");}
	}
	
	fclose(outputtext);


//######################################################################## CLOSE MAPPED ADDRS
  if ( munmap( virtual_base, HW_REGS_SPAN) != 0 ) {
    printf( "ERROR: munmap() failed...\n" );
    close( fd );
    return( 1 );
  }
  if ( munmap( virtual_base_lw, HW_REGS_SPAN) != 0 ) {
    printf( "ERROR: munmap() failed...\n" );
    close( fd );
    return( 1 );
  }

//######################################################################## CLOSE WHEN ALL SUCCESSFUL AND DONE
  close( fd );
 




 return( 0 );
}// main





/*

//####### TIMER STUFF BEGIN
	begin = clock();
//####### TIMER STUFF END

//####### TIMER STUFF 
	end = clock();
	time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
	printf("%f\n", time_spent);
//####### TIMER STUFF END

*/



